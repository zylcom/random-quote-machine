{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","quotes","setQuotes","currentQuote","setCurrentQuote","currentAuthor","setCurrentAuthor","color","setColor","progress","setProgress","colors","getQuotes","a","fetch","then","res","json","data","console","log","message","getRandomQuote","Math","floor","random","length","changeColor","useEffect","className","style","background","transition","onClick","aria-hidden","title","id","opacity","transitionText","setInterval","clearInterval","setTimeout","quote","author","href","encodeURIComponent","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bfa9e92.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [quotes, setQuotes] = useState([]);\n  const [currentQuote, setCurrentQuote] = useState(\n    \"I attribute my success to this: I never gave or took any excuse.\"\n  );\n  const [currentAuthor, setCurrentAuthor] = useState(\"Wayne Gretzky\");\n  const [color, setColor] = useState(\"27ae60\");\n  let [progress, setProgress] = useState(100);\n  const colors = [\n    \"#16a085\",\n    \"#27ae60\",\n    \"#2c3e50\",\n    \"#f39c12\",\n    \"#e74c3c\",\n    \"#9b59b6\",\n    \"#FB6964\",\n    \"#342224\",\n    \"#472E32\",\n    \"#BDBB99\",\n    \"#77B1A9\",\n    \"#73A857\",\n  ];\n\n  const getQuotes = async () => {\n    try {\n      await fetch(\n        \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n      )\n        .then((res) => res.json())\n        .then((data) => setQuotes(data.quotes));\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  const getRandomQuote = () => {\n    return quotes[Math.floor(Math.random() * quotes.length)];\n  };\n\n  const changeColor = () => {\n    setColor(colors[Math.floor(Math.random() * colors.length)]);\n  };\n\n  const getQuote = () => {\n    const transitionText = setInterval(() => {\n      setProgress((progress -= 10));\n      console.log(progress);\n      if (progress === 10) {\n        clearInterval(transitionText);\n        setTimeout(() => {\n          setCurrentQuote(getRandomQuote().quote);\n          setCurrentAuthor(getRandomQuote().author);\n          changeColor();\n          setProgress(100);\n        }, 500);\n      }\n      if (progress <= 0) {\n        clearInterval(transitionText);\n      }\n    }, 50);\n  };\n\n  // const changeColor = () => {\n  //   const updateColor = setInterval(() => {\n  //     setProgress((progress -= 10));\n  //     console.log(progress);\n  //     if (progress === 10) {\n  //       clearInterval(updateColor);\n  //       setTimeout(() => {\n  //         setProgress(100);\n  //       }, 500);\n  //     }\n  //     if (progress <= 0) {\n  //       clearInterval(updateColor);\n  //     }\n  //   }, 100);\n  // };\n\n  useEffect(() => {\n    getQuotes();\n  }, []);\n\n  // console.log(colors[0]);\n  return (\n    <div className=\"App\" style={{ background: color, transition: \"background 1.2s\" }}>\n      <div className=\"change-color\">\n        <button\n          className=\"btn float-end\"\n          style={{ background: \"transparent\" }}\n          onClick={changeColor}\n        >\n          <i className=\"fa fa-refresh\" aria-hidden=\"true\" title=\"Change color\"></i>\n        </button>\n      </div>\n      <div id=\"quote-box\">\n        <div\n          className=\"quote-text\"\n          style={{ opacity: progress / 100, color, transition: \"opacity 1.2s, color 1.2s\" }}\n        >\n          <i className=\"fa fa-quote-left\"></i>\n          <span id=\"text\">{currentQuote}</span>\n        </div>\n        <div\n          className=\"author-text\"\n          style={{ opacity: progress / 100, color, transition: \"opacity 1.2s, color 1.2s\" }}\n        >\n          <span id=\"author\">- {currentAuthor}</span>\n        </div>\n        <div className=\"btns\">\n          <button\n            id=\"new-quote\"\n            className=\"btn\"\n            style={{ background: color, transition: \"background 1.2s\" }}\n            onClick={getQuote}\n          >\n            New Quote\n          </button>\n          <div>\n            <a\n              href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${encodeURIComponent(\n                currentQuote\n              )}\" ${currentAuthor}`}\n              className=\"btn\"\n              id=\"tweet-quote\"\n              title=\"Tweet this quote!\"\n              target=\"_top\"\n              style={{ background: color, transition: \"background 1.2s\" }}\n            >\n              <i className=\"fa fa-twitter\"></i>\n            </a>\n            <a\n              href={`https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=${encodeURIComponent(\n                currentAuthor\n              )}&content=${encodeURIComponent(\n                currentQuote\n              )}&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button`}\n              className=\"btn\"\n              id=\"tumblr-quote\"\n              title=\"Post this quote on tumblr!\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              style={{ background: color, transition: \"background 1.2s\" }}\n            >\n              <i className=\"fa fa-tumblr\"></i>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"footer mt-3\">\n        <span className=\"text-white\">Created by Sabil</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}